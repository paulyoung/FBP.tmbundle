# [PackageDev] target_format: plist, ext: tmLanguage
---
name: FBP
scopeName: source.fbp
fileTypes: ['fbp']
uuid: f452d01c-8d15-451a-ba55-cc6e8bd96bd8

patterns:
- include: '#comment'

- include: '#legacy_export_public_name'
- include: '#legacy_export_private_name_port'
- include: '#legacy_export_private_name'
- include: '#legacy_export_assignment_operator'
- include: '#legacy_export_statement'

- include: '#export_public_name'
- include: '#export_node_port'
- include: '#export_node'
- include: '#export_assignment_operator'
- include: '#inport_statement'
- include: '#outport_statement'

- include: "#right_port"
- include: "#connection"
- include: "#left_port"
- include: "#node"
- include: "#iip"

repository:

# Legacy export
#
  legacy_export_public_name:
    match: ^(EXPORT)(=)([A-Za-z0-9_]+)\.([A-Za-z\.0-9_]+):([A-Z0-9_]+)
    comment: 'Legacy export public name.'
    captures:
      '1': {name: constant.language.fbp}
      '2': {name: keyword.operator.fbp}
      '3': {name: variable.fbp}
      '4': {name: storage.type.fbp}
      '5': {name: variable.fbp}

  legacy_export_private_name_port:
    match: ^(EXPORT)(=)([A-Za-z0-9_]+)\.([A-Za-z\.0-9_]+)
    comment: 'Legacy export private name port.'
    captures:
      '1': {name: constant.language.fbp}
      '2': {name: keyword.operator.fbp}
      '3': {name: variable.fbp}
      '4': {name: storage.type.fbp}

  legacy_export_private_name:
    match: ^(EXPORT)(=)([A-Za-z0-9_]+)
    comment: 'Legacy export private name.'
    captures:
      '1': {name: constant.language.fbp}
      '2': {name: keyword.operator.fbp}
      '3': {name: variable.fbp}

  legacy_export_assignment_operator:
    match: ^(EXPORT)(=)
    comment: 'Legacy export assignment operator.'
    captures:
      '1': {name: constant.language.fbp}
      '2': {name: keyword.operator.fbp}

  legacy_export_statement:
    match: ^(EXPORT)
    comment: 'Legacy EXPORT statement.'
    captures:
      '1': {name: constant.language.fbp}


# Export
#
  export_public_name:
    match: ^((?:IN|OUT)PORT)(=)([A-Za-z0-9_]+)\.([A-Z0-9_]+):([A-Z0-9_]+)
    comment: 'Export public name.'
    captures:
      '1': {name: constant.language.fbp}
      '2': {name: keyword.operator.fbp}
      '3': {name: entity.name.function.fbp}
      '4': {name: storage.type.fbp}
      '5': {name: variable.fbp}

  export_node_port:
    match: ^((?:IN|OUT)PORT)(=)([A-Za-z0-9_]+)\.([A-Z0-9_]+)
    comment: 'Export node port.'
    captures:
      '1': {name: constant.language.fbp}
      '2': {name: keyword.operator.fbp}
      '3': {name: entity.name.function.fbp}
      '4': {name: storage.type.fbp}

  export_node:
    match: ^((?:IN|OUT)PORT)(=)([A-Za-z0-9_]+)
    comment: 'Export node.'
    captures:
      '1': {name: constant.language.fbp}
      '2': {name: keyword.operator.fbp}
      '3': {name: entity.name.function.fbp}

  export_assignment_operator:
    match: '^((?:IN|OUT)PORT)(=)'
    comment: 'Export assignment operator.'
    captures:
      '1': {name: constant.language.fbp}
      '2': {name: keyword.operator.fbp}

  inport_statement:
    match: '^(INPORT)'
    comment: 'INPORT statement.'
    captures:
      '1': {name: constant.language.fbp}

  outport_statement:
    match: '^(OUTPORT)'
    comment: 'OUTPORT statement.'
    captures:
      '1': {name: constant.language.fbp}


# Other patterns
#
  comment:
    match: ((#).*)
    comment: 'Single-line comment.'
    captures:
      '1': {name: comment.line.number-sign.fbp}
      '2': {name: punctuation.definition.comment.line.fbp}

  right_port:
    match: (?:([a-zA-Z0-9_]+\()(?:([a-zA-Z\/\-0-9_]+)|([a-zA-Z\/\-0-9_]+)\:|([a-zA-Z\/\-0-9_]+)\:([a-zA-Z\/=_,0-9]+))?(\))\s(?:([A-Z\.0-9_]+)\[([0-9])\]|([A-Z\.0-9_]+))|(\'(?:\\\'|[^'])*\'))\s(->)\s(?:([A-Z\.0-9_]+)\[([0-9])\]|([A-Z\.0-9_]+))
    comment: 'Port on the right hand side of a connection.'
    captures:
      '1': {name: entity.name.function.fbp}
      '2': {name: variable.parameter.fbp}
      '3': {name: variable.parameter.fbp}
      '4': {name: variable.parameter.fbp}
      '5': {name: entity.name.tag.fbp}
      '6': {name: entity.name.function.fbp}
      '7': {name: storage.type.fbp}
      '8': {name: constant.numeric.fbp}
      '9': {name: storage.type.fbp}
      '10': {name: string.quoted.single.fbp}
      '11': {name: keyword.operator.fbp}
      '12': {name: storage.type.fbp}
      '13': {name: constant.numeric.fbp}
      '14': {name: storage.type.fbp}

  connection:
    match: (?:([a-zA-Z0-9_]+\()(?:([a-zA-Z\/\-0-9_]+)|([a-zA-Z\/\-0-9_]+)\:|([a-zA-Z\/\-0-9_]+)\:([a-zA-Z\/=_,0-9]+))?(\))\s(?:([A-Z\.0-9_]+)\[([0-9])\]|([A-Z\.0-9_]+))|(\'(?:\\\'|[^'])*\'))\s(->)
    comment: 'Connection.'
    captures:
      '1': {name: entity.name.function.fbp}
      '2': {name: variable.parameter.fbp}
      '3': {name: variable.parameter.fbp}
      '4': {name: variable.parameter.fbp}
      '5': {name: entity.name.tag.fbp}
      '6': {name: entity.name.function.fbp}
      '7': {name: storage.type.fbp}
      '8': {name: constant.numeric.fbp}
      '9': {name: storage.type.fbp}
      '10': {name: string.quoted.single.fbp}
      '11': {name: keyword.operator.fbp}

  left_port:
    match: '([a-zA-Z0-9_]+\()(?:([a-zA-Z\/\-0-9_]+)|([a-zA-Z\/\-0-9_]+)\:|([a-zA-Z\/\-0-9_]+)\:([a-zA-Z\/=_,0-9]+))?(\))\s(?:([A-Z\.0-9_]+)\[([0-9])\]|([A-Z\.0-9_]+))'
    comment: 'Port on the left hand side of a connection.'
    captures:
      '1': {name: entity.name.function.fbp}
      '2': {name: variable.parameter.fbp}
      '3': {name: variable.parameter.fbp}
      '4': {name: variable.parameter.fbp}
      '5': {name: entity.name.tag.fbp}
      '6': {name: entity.name.function.fbp}
      '7': {name: storage.type.fbp}
      '8': {name: constant.numeric.fbp}
      '9': {name: storage.type.fbp}

  node:
    comment: 'Node.'
    match: '([a-zA-Z0-9_]+\()(?:([a-zA-Z\/\-0-9_]+)|([a-zA-Z\/\-0-9_]+)\:|([a-zA-Z\/\-0-9_]+)\:([a-zA-Z\/=_,0-9]+))?(\))'
    captures:
      '1': {name: entity.name.function.fbp}
      '2': {name: variable.parameter.fbp}
      '3': {name: variable.parameter.fbp}
      '4': {name: variable.parameter.fbp}
      '5': {name: entity.name.tag.fbp}
      '6': {name: entity.name.function.fbp}

  iip:
    match: (\'(?:\\\'|[^'])*\')
    name: "string.quoted.single.fbp"
    comment: 'Initial information packet.'
